# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ODe7UdW6azyuK627CJo64jzlsmxEltR5
"""

import pandas as pd
housing = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Files/housing.csv.txt")
housing.head()

# info() method which is useful for getting a quick description of the data,especially the total number of rows, the type of each attribute, and the number of non-zero values.

housing.info()

# All attributes are numeric except for the ocean_proximity field. Its type is an object, so it can contain any type of Python object. 
# We have to find out which categories exist in that column and how many districts belong to each category by using the value_counts() method.

housing.ocean_proximity.value_counts()

# Plot a histogram for each numerical attribute.

import matplotlib.pyplot as plt
housing.hist(bins=50, figsize=(10, 8))
plt.show()

# Split the data into training and test sets.

from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)

# It is important to have a sufficient number of instances in dataset for each stratum, otherwise, the estimate of the importance of a stratum may be biased.
# This means that we should not have too many strata and that each stratum should be large enough.

import numpy as np
housing['income_cat'] = pd.cut(housing['median_income'], bins=[0., 1.5, 3.0, 4.5, 6., np.inf], labels=[1, 2, 3, 4, 5])
housing['income_cat'].hist()
plt.show()

"""**Stratified Sampling on Dataset**"""

# Stratified sampling based on income category. For this, we use the StratifiedShuffleSplit class of Scikit-Learn

from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]
print(strat_test_set['income_cat'].value_counts() / len(strat_test_set))

# Now we need to remove the Income_cat attribute to get the data back to its form.

for set_ in (strat_train_set, strat_test_set):
    set_.drop('income_cat', axis=1, inplace=True)
housing = strat_train_set.copy()

# Visualize the data in terms of longitude and latitude.

housing.plot(kind='scatter', x='longitude', y='latitude', alpha=0.4, s=housing['population']/100, label='population',
figsize=(12, 8), c='median_house_value', cmap=plt.get_cmap('jet'), colorbar=True)
plt.legend()
plt.show()

"""**Finding** **Correlations**"""

# Correlation ranges are between -1 and 1. 
# When it is close to 1 it means that there is a positive correlation and when it is close to -1 it means that there is a negative correlation. 
# When it is close to 0, it means that there is no linear correlation.

corr_matrix = housing.corr()
print(corr_matrix.median_house_value.sort_values(ascending=False))

# Correlation matrix  by adding three new columns to the dataset, rooms per household, bedrooms per room and population per household.

housing["rooms_per_household"] = housing["total_rooms"]/housing["households"]
housing["bedrooms_per_room"] = housing["total_bedrooms"]/housing["total_rooms"]
housing["population_per_household"] = housing["population"]/housing["households"]

corr_matrix = housing.corr()
print(corr_matrix["median_house_value"].sort_values(ascending=False))

"""**Data Preparation**"""

# Now, this is the most important step before a train a machine learning model. Perform all the necessary data transformations


housing = strat_train_set.drop("median_house_value", axis=1)
housing_labels = strat_train_set["median_house_value"].copy()

median = housing["total_bedrooms"].median()
housing["total_bedrooms"].fillna(median, inplace=True)

housing_num = housing.drop("ocean_proximity", axis=1)

from sklearn.base import BaseEstimator, TransformerMixin

# column index
rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6

class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    def __init__(self, add_bedrooms_per_room=True): # no *args or **kargs
        self.add_bedrooms_per_room = add_bedrooms_per_room
    def fit(self, X, y=None):
        return self  # nothing else to do
    def transform(self, X):
        rooms_per_household = X[:, rooms_ix] / X[:, households_ix]
        population_per_household = X[:, population_ix] / X[:, households_ix]
        if self.add_bedrooms_per_room:
            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]
            return np.c_[X, rooms_per_household, population_per_household,
                         bedrooms_per_room]
        else:
            return np.c_[X, rooms_per_household, population_per_household]

# Scikit-Learn provides the Pipeline class to help us with such sequences of transformations.


from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
num_pipeline = Pipeline([
    ('imputer',SimpleImputer(strategy="median")),
    ('attribs_adder', CombinedAttributesAdder()),
    ('std_scaler', StandardScaler()),
])
housing_num_tr = num_pipeline.fit_transform(housing_num)

from sklearn.compose import ColumnTransformer
num_attribs = list(housing_num)
cat_attribs = ["ocean_proximity"]
full_pipeline = ColumnTransformer([
    ("num", num_pipeline, num_attribs),
    ("cat", OneHotEncoder(), cat_attribs),
])
housing_prepared = full_pipeline.fit_transform(housing)

from google.colab import drive
drive.mount('/content/drive')

"""**Linear Regression for House Price Prediction**"""

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(housing_prepared, housing_labels)

data = housing.iloc[:5]
labels = housing_labels.iloc[:5]
data_preparation = full_pipeline.transform(data)
print("Predictions: ", lin_reg.predict(data_preparation))